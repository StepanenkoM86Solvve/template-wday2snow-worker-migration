<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:stdio="http://www.mulesoft.org/schema/mule/stdio" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/stdio http://www.mulesoft.org/schema/mule/stdio/current/mule-stdio.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd">
    <data-mapper:config name="List_WorkerType__To_Map" transformationGraphPath="list_workertype__to_map.grf" doc:name="List_WorkerType__To_Map"/>
    
    <batch:job name="migrateUsersBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <wd-hr:get-workers config-ref="Workday_Human_Resource" doc:name="Get Workers from Workday" workersRequest-ref="#[org.mule.kicks.WorkersRequest.create(${migration.startDate})]"/>
            <set-payload value="#[payload.responseData.worker]" doc:name="Extract a list of Workers"/>
            <custom-filter doc:name="Filter duplicate workers" class="org.mule.kicks.WorkersDeduplicationFilter"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="GetLastModifiedDate">
                <enricher source="payload" target="#[recordVars['lastModifiedDate']]" doc:name="store the value in 'recordVars['lastModifiedDate']'">
                    <custom-transformer class="org.mule.kicks.TransactionLogProcessor" doc:name="Iterate through transaction logs"/>
                </enricher>
            </batch:step>
            <batch:step name="getUserInSnowStep">
                <enricher source="#[payload]" target="#[recordVars['userInSnow']]" doc:name="store result in record var 'userInSnow'">
                    <choice doc:name="Choice">
                        <when expression="#[payload.workerData.userAccountData == null]">
                            <servicenow:get-records config-ref="ServiceNow" type="SYS_USER" doc:name="query user in ServiceNow by email and name">
                                <servicenow:get-records-request>
                                    <servicenow:get-records-request key="lastName">#[payload.workerData.getPersonalData().getNameData().getPreferredNameData().getNameDetailData().getLastName()]</servicenow:get-records-request>
                                    <servicenow:get-records-request key="email">#[payload.workerData.getPersonalData().getContactData().getEmailAddressData().get(0).getEmailAddress()]</servicenow:get-records-request>
                                    <servicenow:get-records-request key="firstName">#[payload.workerData.getPersonalData().getNameData().getPreferredNameData().getNameDetailData().getFirstName()]</servicenow:get-records-request>
                                </servicenow:get-records-request>
                            </servicenow:get-records>
                        </when>
                        <when expression="#[payload.workerData.userAccountData != null &amp;&amp; payload.workerData.userAccountData.userName != null]">
                            <servicenow:get-records config-ref="ServiceNow" type="SYS_USER" doc:name="query user in ServiceNow by username">
                                <servicenow:get-records-request>
                                    <servicenow:get-records-request key="userName">#[payload.workerData.userAccountData.userName]</servicenow:get-records-request>
                                </servicenow:get-records-request>
                            </servicenow:get-records>
                        </when>
                        <otherwise>
                            <set-payload value="#[return null]" doc:name="Set Payload"/>
                        </otherwise>
                    </choice>
                </enricher>

 
            </batch:step>
            <batch:step name="Map_Workday_Worker_to_Snow_Map">
                <data-mapper:transform config-ref="List_WorkerType__To_Map" doc:name="WorkerType To Map"/>

            </batch:step>

            <batch:step name="selectNewerUserStep" filter-expression="#[recordVars['userInSnow'] is NullPayload]">
                <choice doc:name="Choice">
                    <when expression="#[org.mule.kicks.UserDateComparator.isAfter(recordVars['lastModifiedDate'], recordVars['userInSnow'], ${utc.offset})]">
                        <expression-component doc:name="define Id in Service Now instance"><![CDATA[ payload.put('sysId', recordVars['userInSnow'].getGetRecordsResult().isEmpty() ? null : recordVars['userInSnow'].getGetRecordsResult().get(0).getSysId());]]></expression-component> 
                    </when>
                    <otherwise>
                        <set-payload doc:name="set to null to skip this user" value="#[return null]"/>
                    </otherwise>
                </choice>
            </batch:step>

            <batch:step name="createUsersInServiceNowStep" accept-expression="!(payload instanceof NullPayload) &amp;&amp; payload['sysId'] == null">
 
                <logger message="User to create: #[payload]" level="INFO" doc:name="Log user to create"/>
                <expression-component doc:name="Expression"><![CDATA[payload.remove('username');]]></expression-component>
                <servicenow:insert config-ref="ServiceNow" type="SYS_USER" doc:name="ServiceNow">
                    <servicenow:insert-request ref="#[payload]"/>
                </servicenow:insert>

            </batch:step>
            <batch:step name="UpdateUsersInServiceNowStep" accept-expression="!(payload instanceof NullPayload) &amp;&amp; payload['sysId'] != null &amp;&amp; payload['email'] != null">
                <logger message="User to update: #[payload]" level="INFO" doc:name="Log user to update"/>
                <servicenow:update config-ref="ServiceNow" type="SYS_USER" doc:name="ServiceNow">
                    <servicenow:update-request ref="#[payload]"/>
                </servicenow:update>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                	<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
					<smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow" doc:name="mainFlow" processingStrategy="synchronous" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it.

">
        <batch:execute name="migrateUsersBatch" doc:name="trigger migrateUsersBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
