<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:wd-connector="http://www.mulesoft.org/schema/mule/wd-connector"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" 
xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
xmlns:json="http://www.mulesoft.org/schema/mule/json" 
xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:spring="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/wd-connector http://www.mulesoft.org/schema/mule/wd-connector/current/mule-wd-connector.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd" >
    
    <batch:job name="migrateUsersBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <dw:transform-message doc:name="Create GetWorkers Request">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
ns0#Get_Workers_Request: {
	ns0#Request_Criteria: {
		ns0#Transaction_Log_Criteria_Data: {
			ns0#Transaction_Date_Range_Data: {
				ns0#Updated_From: p('migration.startDate'),
				ns0#Updated_Through: now - |PT6S|
			}
		},
		ns0#Exclude_Inactive_Workers: true,
		ns0#Exclude_Employees: false,
		ns0#Exclude_Contingent_Workers: false
	},
	ns0#Response_Group: {
		ns0#Include_Reference: true,
		ns0#Include_Personal_Information: true,
		ns0#Include_Transaction_Log_Data: true,
		ns0#Include_User_Account: true
	}
}]]></dw:set-payload>
            </dw:transform-message>
            <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Get_Workers" doc:name="get Workers from Workday"/>
            <dw:transform-message doc:name="Extract list of  Workers">
                <dw:input-payload doc:sample="sample_data\Get_Workers_Response.xml"/>
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 urn:com.workday/bsvc
---
(payload.ns0#Get_Workers_Response.ns0#Response_Data.*ns0#Worker
filter ($.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address != null 
and $.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address != '')
distinctBy $.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address)
when payload.ns0#Get_Workers_Response.ns0#Response_Data != null otherwise []
]]></dw:set-payload>
              </dw:transform-message>

        </batch:input> 
        <batch:process-records>

            <batch:step name="getUserInSnowStep" accept-expression="payload != null">
                <enricher source="#[payload == null ? null : payload[0].Id]" target="#[recordVars.snowUserId]" doc:name="store user Id in record var 'snowUserId'">
                    <processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Create getRecords Request" metadata:id="42c20aef-fdf5-45df-a290-bde894b418cd">
                            <dw:input-payload/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
%var userAccountData = payload.Worker_Data.User_Account_Data
---
using (personalData = payload.Worker_Data.Personal_Data)
{
	ns0#getRecords: {
		(ns0#email: personalData.Contact_Data.Email_Address_Data.Email_Address) when (userAccountData == null or userAccountData.User_Name == null),
 		(ns0#"first_name": personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.First_Name) when (userAccountData == null or userAccountData.User_Name == null),
 		(ns0#"last_name": personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.Last_Name) when (userAccountData == null or userAccountData.User_Name == null),
 		(ns0#"user_name": userAccountData.User_Name) when (userAccountData != null and userAccountData.User_Name != null)
	}
}]]></dw:set-payload>
                        </dw:transform-message>
                        <servicenow:invoke config-ref="ServiceNow" type="sys_user||getRecords" doc:name="query user in ServiceNow"/>
                        <dw:transform-message doc:name="Get User ID">
                        	<dw:input-payload doc:sample="sample_data\getRecordsResponse.xml"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://www.service-now.com/sys_user
---
payload.ns0#getRecordsResponse map
{
	Id: $.ns0#sys_id
} when payload.ns0#getRecordsResponse is :object otherwise [{Id: null}]]]></dw:set-payload>
                        </dw:transform-message>

                    </processor-chain>

                </enricher>
            </batch:step>

            <batch:step name="createUsersInServiceNowStep" accept-expression="payload != null &amp;&amp; recordVars.snowUserId == null">
                <dw:transform-message doc:name="Create insert Request" metadata:id="e44d6e87-06b8-4381-9df4-f1a6ca581f9d">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
using (personalData = payload.Worker_Data.Personal_Data)
{
	ns0#insert: {
		ns0#active        : payload.Worker_Data.Employment_Data.Worker_Status_Data.Active,
 		ns0#city          : personalData.Contact_Data.Address_Data.Municipality,
 		ns0#country       : personalData.Contact_Data.Address_Data.Country_Reference.ID,
 		ns0#email         : personalData.Contact_Data.Email_Address_Data.Email_Address,
 		ns0#"first_name"  : personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.First_Name,
 		ns0#"home_phone"  : personalData.Contact_Data.Phone_Data.Formatted_Phone,
 		ns0#"last_name"   : personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.Last_Name,
 		ns0#"middle_name" : personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.Middle_Name,
 		ns0#state         : personalData.Contact_Data.Address_Data.countryRegionReference.ID,
 		ns0#street        : personalData.Contact_Data.Address_Data.Address_Line_Data,
 		(ns0#"user_name"  : payload.Worker_Data.User_Account_Data.User_Name) when (payload.Worker_Data.User_Account_Data != null and payload.Worker_Data.User_Account_Data.User_Name != null),
 		ns0#"zip"         : personalData.Contact_Data.Address_Data.Postal_Code
	}
}]]></dw:set-payload>
                </dw:transform-message>


                <servicenow:invoke config-ref="ServiceNow" type="sys_user||insert" doc:name="ServiceNow"/>



            </batch:step>
            <batch:step name="updateUsersInServiceNowStep" accept-expression="payload != null &amp;&amp; recordVars.snowUserId != null">


                <dw:transform-message doc:name="Create update Request" metadata:id="0137d081-6157-451d-b88e-0299fa42bbc5">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
using (personalData = payload.Worker_Data.Personal_Data)
{
	ns0#update: {
		ns0#active        : payload.Worker_Data.Employment_Data.Worker_Status_Data.Active,
 		ns0#city          : personalData.Contact_Data.Address_Data.Municipality,
 		ns0#country       : personalData.Contact_Data.Address_Data.Country_Reference.ID,
 		ns0#email         : personalData.Contact_Data.Email_Address_Data.Email_Address,
 		ns0#"first_name"  : personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.First_Name,
 		ns0#"home_phone"  : personalData.Contact_Data.Phone_Data.Formatted_Phone,
 		ns0#"last_name"   : personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.Last_Name,
 		ns0#"middle_name" : personalData.Name_Data.Preferred_Name_Data.Name_Detail_Data.Middle_Name,
 		ns0#state         : personalData.Contact_Data.Address_Data.countryRegionReference.ID,
 		ns0#street        : personalData.Contact_Data.Address_Data.Address_Line_Data,
 		ns0#"sys_id"      : recordVars.snowUserId,
 		(ns0#"user_name"  : payload.Worker_Data.User_Account_Data.User_Name) when (payload.Worker_Data.User_Account_Data != null and payload.Worker_Data.User_Account_Data.User_Name != null),
 		ns0#"zip"         : personalData.Contact_Data.Address_Data.Postal_Code
	}
}]]></dw:set-payload>
                </dw:transform-message>


                <servicenow:invoke config-ref="ServiceNow" type="sys_user||update" doc:name="ServiceNow"/>



            </batch:step>
        </batch:process-records>
         <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                    <parse-template location="email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it.

">
        <batch:execute name="migrateUsersBatch" doc:name="trigger migrateUsersBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
